name: Manager CD Pipeline For Develop

on:
  workflow_dispatch:
  workflow_run:
    workflows: ['Manager CI Pipeline For Develop']
    types:
      - completed

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
  DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
  SERVICE_NAME: manager-fe
  PORT: 8081

jobs:
  deploy:
    runs-on: [self-hosted, develop]
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.merged == true }}
    steps:
      - name: Create Docker Network
        run: |
          if ! sudo docker network ls --format "{{.Name}}" | grep -q "^fe-network$"; then
            sudo docker network create fe-network
          fi

      - name: Pull Docker image
        run: sudo docker pull $DOCKER_USERNAME/$DOCKER_REPOSITORY:$SERVICE_NAME-latest

      - name: Set Blue/Green Container Name
        run: |
          BLUE_CONTAINER_NAME=$(sudo docker ps --format "{{.ID}} {{.Names}} {{.CreatedAt}}" | grep -E " ${SERVICE_NAME}" | sort -k3 -r | head -n 1 | awk '{print $2}')

          if [[ $BLUE_CONTAINER_NAME == *-a ]]; then
              GREEN_CONTAINER_NAME="${SERVICE_NAME}-b"
          elif [[ $BLUE_CONTAINER_NAME == *-b ]]; then
              GREEN_CONTAINER_NAME="${SERVICE_NAME}-a"
          else
              GREEN_CONTAINER_NAME="${SERVICE_NAME}-a"
          fi

          echo "BLUE: $BLUE_CONTAINER_NAME"
          echo "GREEN: $GREEN_CONTAINER_NAME"

          echo "BLUE_CONTAINER_NAME=$BLUE_CONTAINER_NAME" >> $GITHUB_ENV
          echo "GREEN_CONTAINER_NAME=$GREEN_CONTAINER_NAME" >> $GITHUB_ENV

      - name: Run Docker Container
        run: |
          sudo docker run -d \
          --network fe-network \
          --restart always \
          --name $GREEN_CONTAINER_NAME $DOCKER_USERNAME/$DOCKER_REPOSITORY:$SERVICE_NAME-latest

      - name: Wait Application Running
        run: |
          IS_LOAD="FALSE"

          for i in {1..10}; do
            LOAD_STATUS=$(sudo docker exec $GREEN_CONTAINER_NAME wget --spider --server-response -q http://127.0.0.1:3000 2>&1 | awk '/^  HTTP/{print $2}')
            echo "LOAD_STATUS: $LOAD_STATUS"

            if [[ "$LOAD_STATUS" == "200" ]]; then
              IS_LOAD="TRUE"
              break
            else
              echo "Application is not load. Retry..."
              sleep 6
            fi
          done

          if [[ "$IS_LOAD" == "FALSE" ]]; then
            sudo docker rm -f "$GREEN_CONTAINER_NAME"
            exit 1
          fi

      - name: Generate Green Nginx Configuration
        run: |
          cat <<EOF > /tmp/${GREEN_CONTAINER_NAME}.conf
          server {
              listen 80;
              client_max_body_size 300M;

              location / {
                  proxy_pass http://${GREEN_CONTAINER_NAME}:${PORT};
              }
          }
          EOF

      - name: Generate Blue Nginx Configuration
        run: |
          cat <<EOF > /tmp/${BLUE_CONTAINER_NAME}.conf
          server {
              listen 80;
              client_max_body_size 300M;

              location / {
                  proxy_pass http://${BLUE_CONTAINER_NAME}:${PORT};
              }
          }
          EOF

      - name: Set Default Nginx Configuration
        run: cp /tmp/${GREEN_CONTAINER_NAME}.conf /tmp/default.conf

      - name: Run Nginx
        run: |
          if ! sudo docker ps --format "{{.Names}}" | grep -q "^fe-nginx$"; then
            sudo docker run -d \
              --network fe-network \
              --restart always \
              --name fe-nginx \
              -p $PORT:80 \
              -v /tmp/default.conf:/etc/nginx/conf.d/default.conf:ro \
              nginx
          fi

          sudo docker exec fe-nginx nginx -s reload

      - name: Health Check And Rollback
        run: |
          IS_HEALTHY="FALSE"

          for i in {1..3}; do
            RESULT_CODE=$(wget --spider --server-response -q http://127.0.0.1:$PORT 2>&1 | awk '/^  HTTP/{print $2}')
            echo "RESULT_CODE: $RESULT_CODE"

            if [ "$RESULT_CODE" == "200" ]; then
              echo "HEALTH CHECK SUCCESS. DO CLEAN PROCESS."
              IS_HEALTHY="TRUE"

              sudo docker rm -f "$BLUE_CONTAINER_NAME"
              sudo docker image prune -f

              echo "IS HEALTHY: $IS_HEALTHY"
              break
            else
              echo "FAILED TO HEALTH CHECK... RETRYING IN 5 SECONDS"
              sleep 5
            fi
          done

          if [ "$IS_HEALTHY" == "FALSE" ]; then
            echo "HEALTH CHECK FAILED. DO ROLLBACK."
            cp "/tmp/${BLUE_CONTAINER_NAME}.conf" /tmp/default.conf

            sudo docker exec fe-nginx nginx -s reload
            sudo docker rm -f "$GREEN_CONTAINER_NAME"
          fi
